Question: Rotate List
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

Solution/Code:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        ListNode i=head;
        int n=0;
        while(i!=null)
    {
        n++;
        i=i.next;
    }
    if(n==0)
    return head;
    k=k%n;
    if(n==0 || n==1 || k==0 || k==n )
    return head;
    n=n-k-1;
    i=head;
    while(n>0)
    {
        i=i.next;
        n--;
    }
    ListNode j=i.next;
    ListNode o=i.next;
    i.next=null;
    k--;
    while(k>0 && j.next !=null)
    {
        j=j.next;
        k--;
    }
    j.next=head;
    return o;
    }

}
